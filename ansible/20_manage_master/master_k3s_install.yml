---

- name: lets install k3s
  hosts: master
  connection: ssh
  gather_facts: true
  become: true
  tasks:

    - name: ufw is running
      ansible.builtin.systemd:
        state: started
        name: ufw
      tags:
        - k3s

    - name: Deny all access to port 6443
      community.general.ufw:
        rule: deny
        port: '6443'
      tags:
        - k3s

    - name: open fw
      community.general.ufw:
        rule: allow
        name: OpenSSH
      tags:
        - k3s

    - name: allow k3s for ip of own host
      community.general.ufw:
        rule: allow
        proto: tcp
        src: "{{ ansible_default_ipv4.address }}"
        port: "6443"
        comment: allow k3s
      tags:
        - k3s

    - name: Create etc rancher k3s dir
      ansible.builtin.file:
        path: /etc/rancher/k3s/
        state: directory
        mode: '0755'
      tags:
        - k3s

    - name: generate rancher resolv
      ansible.builtin.template:
        src: rancher_resolv_conf.j2
        dest: /etc/rancher/k3s/resolv.conf
        mode: '0644'
      tags:
        - k3s

    - name: generate rancher registry
      ansible.builtin.template:
        src: templates/k3s_server_registry.yaml
        dest: /etc/rancher/k3s/registries.yaml
        mode: '0644'
      tags:
        - k3s

    - name: install k3s
      shell: |
        set -aeEux
        K3S_TOKEN=12345
        K3S_RESOLV_CONF=/etc/rancher/k3s/resolv.conf
        INSTALL_K3S_VERSION=v1.28.14+k3s1
        INSTALL_K3S_EXEC="server"
        INSTALL_K3S_EXEC="$INSTALL_K3S_EXEC --bind-address {{ k3s_bind_ip }}"
        INSTALL_K3S_EXEC="$INSTALL_K3S_EXEC --write-kubeconfig-mode 644"
        INSTALL_K3S_EXEC="$INSTALL_K3S_EXEC --selinux"
        INSTALL_K3S_EXEC="$INSTALL_K3S_EXEC --tls-san master.localnet"
        INSTALL_K3S_EXEC="$INSTALL_K3S_EXEC --resolv-conf /etc/rancher/k3s/resolv.conf"
        curl -sfL https://get.k3s.io | sh -
      args:
        creates: /usr/local/bin/k3s-uninstall.sh
      tags:
        - k3s

    - name: copy remote k3s.yaml to local
      ansible.builtin.fetch:
        flat: true
        src: /etc/rancher/k3s/k3s.yaml
        dest: /var/tmp/k3s.yaml
        mode: '0400'
      tags:
        - k3s

    # FIXME raises crashed traefik
    - name: Traefik Postwork
      ansible.builtin.template:
        src: traefik_postwork.yml.j2
        dest: /var/lib/rancher/k3s/server/manifests/traefik-config.yaml
      tags:
        - k3s

    - name: Wait for service to start
      ansible.builtin.pause:
        seconds: 120
      run_once: true
      tags:
        - k3s

- hosts: localhost
  become: false
  gather_facts: false

  tasks:

    - name: debug
      debug:
        msg:
          - "DOCKER_REPO_USERNAME: {{ DOCKER_REPO_USERNAME }}"
          - "DOCKER_REPO_EMAIL: {{ DOCKER_REPO_EMAIL }}"
          - "DOCKER_REPO_SECRET: {{ DOCKER_REPO_SECRET }}"
      tags:
        - cert-manager


    - name: fix /var/tmp/k3s.yaml
      command: chmod go-rwx /var/tmp/k3s.yaml

    - name: delete namespace cert-manager
      kubernetes.core.k8s:
        name: cert-manager
        api_version: v1
        kind: Namespace
        state: absent
        wait: true
      tags:
        - cert-manager

    - name: Add a repository
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: https://charts.jetstack.io
        force_update: true
      tags:
        - cert-manager

    - name: helm deploy cert-manager
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        chart_version: v1.15.3
        create_namespace: true
        release_namespace: cert-manager
        update_repo_cache: true
        set_values:
          - value: crds.enabled=true
      tags:
        - cert-manager
      register: out

    - name: debug
      debug:
        var: out

    - name: Create a k8s namespace
      kubernetes.core.k8s:
        name: "{{ gitea_namespace }}"
        api_version: v1
        kind: Namespace
        state: present
      tags:
        - cert-manager

    - name: create own ca
      kubernetes.core.k8s:
        state: present
        name: my-own-ca
        namespace: cert-manager
        definition:
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            name: my-own-ca
            namespace: cert-manager
          data:
            tls.crt: "{{ lookup('file', 'ca.crt') | b64encode }}"
            tls.key: "{{ lookup('file', 'ca.key') | b64encode }}"
      tags:
        - cert-manager

    - name: create own issuer
      kubernetes.core.k8s:
        state: present
        name: my-own-ca
        namespace: cert-manager
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: my-own-issuer
          spec:
            ca:
              secretName: my-own-ca
      tags:
        - cert-manager

    - name: Create a k8s namespace
      kubernetes.core.k8s:
        name: "{{ gitea_namespace }}"
        api_version: v1
        kind: Namespace
        state: present
      tags:
        - whoami

    - name: Add stable chart repo
      kubernetes.core.helm_repository:
        name: cowboysysop
        repo_url: https://cowboysysop.github.io/charts/
        force_update: true
      tags:
        - whoami

    - name: helm deploy whoami
      tags:
        - whoami
      kubernetes.core.helm:
        name: whoami
        chart_ref: cowboysysop/whoami
        release_namespace: "{{ gitea_namespace }}"
        update_repo_cache: true
        values:
          replicaCount: 1
          ingress:
            enabled: true
            className: traefik
            annotations:
              cert-manager.io/cluster-issuer: my-own-issuer
              cert-manager.io/common-name: whoami.localnet
            hosts:
              - host: whoami.localnet
                paths:
                  - /
            tls:
              - hosts:
                  - whoami.localnet
                secretName: whoami-tls

# --- EOF
