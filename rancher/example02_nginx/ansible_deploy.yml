---
- hosts: localhost
  gather_facts: false
  connection: local
  vars:
    # docker | containerd
    containerengine: containerd
    namespace: myapp
    app_name: app01
    app_image: "containous/whoami"
    # app_version: 1.0.1
    app_version: "latest"
  collections:
    - community.kubernetes

  tasks:

    # - name: build nginx-helloworld
    #   # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_image_module.html#ansible-collections-community-docker-docker-image-module
    #   community.docker.docker_image:
    #     name: "{{ app_name }}:{{ app_version }}"
    #     build:
    #       path: ./nginx-helloworld
    #       args:
    #         listen_port: 8080
    #     source: build
    #   when: containerengine == "docker"

    # - name: build nginx-helloworld
    #   # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_image_module.html#ansible-collections-community-docker-docker-image-module
    #   shell: |
    #     set -aeEux
    #     set -o pipefail
    #     cd nginx-helloworld
    #     nerdctl --namespace "{{ namespace }}" build --tag "{{ app_name }}":"{{ app_version }}" .
    #     nerdctl --namespace "{{ namespace }}" images | grep "{{ app_name }}" | grep "{{ app_version }}" 
    #   when: containerengine == "containerd"

    - name: Ensure the myapp Namespace exists
      # https://opensource.com/article/20/9/ansible-modules-kubernetes
      k8s:
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"
        state: present

    - name: deploy app
      k8s:
        api_version: v1
        namespace: "{{ namespace }}"
        definition:
          kind: Deployment
          metadata:
            labels:
              app: "{{ app_name }}"
            name: "{{ app_name }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: "{{ app_name }}"
            template:
              metadata:
                labels:
                  app: "{{ app_name }}"
              spec:
                containers:
                  - name: "{{ app_name }}"
                    image: "{{ app_image }}"
                    ports:
                      - containerPort: 8080
                        protocol: TCP

    # - name: Execute a command
    #   kubernetes.core.k8s_exec:
    #     namespace: myapp
    # pod: zuul-scheduler
    # command: zuul-scheduler full-reconfigure

    # - name: Build an image and push it to a private repo
    #   community.docker.docker_image:
    #     build:
    #       path: ./my_nginx
    #     name: registry.ansible.com/pfistera/my_nginx
    #     tag: v1
    #     push: yes
    #     source: build

    # - name: archive container image as a tarball
    #   docker_image:
    #     name: democontainer:v1.0
    #     archive_path: /tmp/democontainer_v1_0.tar
    #     source: pull
    #     state: present

    # - name: fetch archived image
    #   fetch:
    #     src: /tmp/democontainer_v1_0.tar
    #     dest: ./democontainer_v1_0.tar
    #     flat: true
