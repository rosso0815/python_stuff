set verify off
set feedback off
set echo off
set long 5000
set pagesize 0
set head off
set serveroutput on

spool create_tablespaces.sql

declare
vTbsName varchar2(30);
vBlkSize number;
vInitial number;
vNext number;
vMinExtents number;
vMaxExtents number;
vPctIncrease number;
vMinExtLen number;
vTbsStatus varchar2(9);
vContents varchar2(9);
vLogging varchar2(9);
vForceLogging varchar2(3);
vExtManagement varchar2(10);
vAllocType varchar2(9);
vPluggedIn varchar2(3);
vSegManagement varchar2(6);

vFileName varchar2(100);
vBytes number;
vMaxBytes number;
vIncrementBy number;

vCursorTbs integer;
vCursorFile integer;
RecTbs dba_tablespaces%rowtype;

vDBBlkSize integer;
vLocalTmpTbs boolean;
vUndoTbs boolean;
vExtManLocal boolean;
vVersion varchar2(10);
vFileType varchar2(10);
vMaxExtValue varchar2(20);
vSelTbs varchar2(400);
vSelFile varchar2(400);
vTbsColumnList varchar2(400);
vFileColumnList varchar2(400);
vReturn integer;
vTbsSql varchar2(2000);

begin

dbms_output.enable(1000000);

select value
into vDBBlkSize
from v$parameter
where name = 'db_block_size';

/* select substr(version, 1, 3)
into vVersion
from v$instance;
*/

vVersion := '9.2';

vTbsColumnList := 'tablespace_name, initial_extent, next_extent,' ||
'min_extents, max_extents, pct_increase, status';

if vVersion = '8.0' then
vTbsColumnList := vTbsColumnList ||
', min_extlen, contents, logging';
elsif vVersion = '8.1' then
vTbsColumnList := vTbsColumnList ||
', min_extlen, contents, logging,' ||
' extent_management, allocation_type, plugged_in';
elsif vVersion = '9.0' then
vTbsColumnList := vTbsColumnList ||
', min_extlen, contents, logging,' ||
' extent_management, allocation_type, plugged_in,' ||
' block_size, segment_space_management';
else
vTbsColumnList := vTbsColumnList ||
', min_extlen, contents, logging,' ||
' extent_management, allocation_type, plugged_in,' ||
' block_size, segment_space_management, force_logging';
end if;

vSelTbs := 'select ' || vTbsColumnList || ' from dba_tablespaces ' ||
'where tablespace_name <> ' || 'SYSTEM' ;

dbms_output.put_line('DBG01');

vCursorTbs := dbms_sql.open_cursor;

dbms_sql.parse(vCursorTbs, vSelTbs, dbms_sql.native);

-- Common columns among versions
dbms_sql.define_column(vCursorTbs, 1, vTbsName, 30);
dbms_sql.define_column(vCursorTbs, 2, vInitial);
dbms_sql.define_column(vCursorTbs, 3, vNext);
dbms_sql.define_column(vCursorTbs, 4, vMinExtents);
dbms_sql.define_column(vCursorTbs, 5, vMaxExtents);
dbms_sql.define_column(vCursorTbs, 6, vPctIncrease);
dbms_sql.define_column(vCursorTbs, 7, vTbsStatus, 9);

if vVersion in ('8.0', '8.1', '9.0', '9.2') then
begin
dbms_output.put_line('DBG02');
dbms_sql.define_column(vCursorTbs, 8, vMinExtLen);
dbms_sql.define_column(vCursorTbs, 9, vContents, 9);
dbms_sql.define_column(vCursorTbs, 10, vLogging, 9);
end;
end if;

if vVersion in ('8.1', '9.0', '9.2') then
begin
dbms_sql.define_column(vCursorTbs, 11, vExtManagement, 10);
dbms_sql.define_column(vCursorTbs, 12, vAllocType, 9);
dbms_sql.define_column(vCursorTbs, 13, vPluggedIn, 3);
end;
end if;

if vVersion in ('9.0', '9.2') then
begin
dbms_sql.define_column(vCursorTbs, 14, vBlkSize);
dbms_sql.define_column(vCursorTbs, 15, vSegManagement, 9);
end;
end if;

if vVersion = '9.2' then
dbms_sql.define_column(vCursorTbs, 16, vForceLogging, 3);
end if;

vReturn := dbms_sql.execute(vCursorTbs);

if vReturn = 0 then
dbms_output.put_line('-- Script generated by reverse_tbs.sql');
dbms_output.put_line('-- Date : ' || to_char(sysdate, 'DD/MM/YYYY'));
dbms_output.put_line('spool create_tablespaces.log');
end if;

loop

begin


if dbms_sql.fetch_rows(vCursorTbs) <= 0 then
exit;
end if;

vLocalTmpTbs := false;
vUndoTbs := false;
vExtManLocal := false;
vTbsSql := null;

dbms_sql.column_value(vCursorTbs, 1, vTbsName);
dbms_sql.column_value(vCursorTbs, 2, vInitial);
dbms_sql.column_value(vCursorTbs, 3, vNext);
dbms_sql.column_value(vCursorTbs, 4, vMinExtents);
dbms_sql.column_value(vCursorTbs, 5, vMaxExtents);
dbms_sql.column_value(vCursorTbs, 6, vPctIncrease);
dbms_sql.column_value(vCursorTbs, 7, vTbsStatus);

if vVersion in ('8.0', '8.1', '9.0', '9.2') then
begin
dbms_sql.column_value(vCursorTbs, 8, vMinExtLen);
dbms_sql.column_value(vCursorTbs, 9, vContents);
dbms_sql.column_value(vCursorTbs, 10, vLogging);
end;
end if;

if vVersion in ('8.1', '9.0', '9.2') then
begin
dbms_sql.column_value(vCursorTbs, 11, vExtManagement);
dbms_sql.column_value(vCursorTbs, 12, vAllocType);
dbms_sql.column_value(vCursorTbs, 13, vPluggedIn);

if vExtManagement = 'LOCAL' then
vExtManLocal := true;
end if;

if vContents = 'TEMPORARY' AND vExtManagement = 'LOCAL' then
vLocalTmpTbs := true;
end if;
end;
end if;

if vVersion in ('9.0', '9.2') then
begin
dbms_sql.column_value(vCursorTbs, 14, vBlkSize);
dbms_sql.column_value(vCursorTbs, 15, vSegManagement);

if vContents = 'UNDO' then
vUndoTbs := true;
end if;
end;
end if;

if vVersion = '9.2' then
dbms_sql.column_value(vCursorTbs, 16, vForceLogging);
end if;

dbms_output.put_line('Prompt .');
dbms_output.put_line('Prompt Creating tablespace ' || vTbsName || '...');

if vUndoTbs then
dbms_output.put_line('CREATE UNDO TABLESPACE ' || vTbsName);
elsif vLocalTmpTbs then
dbms_output.put_line('CREATE TEMPORARY TABLESPACE ' || vTbsName);
else
dbms_output.put_line('CREATE TABLESPACE ' || vTbsName);
end if;

if substr(vVersion, 1, 1) = '7' then
vSelFile := 'select v.name file_name,
(ts.blocksize * f.blocks) bytes,
e.inc increment_by
from sys.file$ f, sys.ts$ ts,
sys.v_$dbfile v, sys.filext$ e
where ts.name = ' || vTbsName || ' and v.file# = f.file# (+)
and f.ts# = ts.ts# (+)
and f.file# = e.file# (+)
order by f.file#';
elsif vLocalTmpTbs then
vSelFile := 'select file_name, bytes, increment_by
from dba_temp_files
where tablespace_name = ' || vTbsName ;
else
vSelFile := 'select file_name, bytes, increment_by
from dba_data_files
where tablespace_name = ' || vTbsName ;
end if;

vCursorFile := dbms_sql.open_cursor;

dbms_sql.parse(vCursorFile, vSelFile, dbms_sql.native);

dbms_sql.define_column(vCursorFile, 1, vFileName, 100);
dbms_sql.define_column(vCursorFile, 2, vBytes);
dbms_sql.define_column(vCursorFile, 3, vIncrementBy);

vReturn := dbms_sql.execute(vCursorFile);

loop

begin

if dbms_sql.fetch_rows(vCursorFile) <= 0 then
exit;
end if;

dbms_sql.column_value(vCursorFile, 1, vFileName);
dbms_sql.column_value(vCursorFile, 2, vBytes);
dbms_sql.column_value(vCursorFile, 3, vIncrementBy);

if dbms_sql.last_row_count = 1 then
if vLocalTmpTbs then
vFileType := 'TEMPFILE ';
else
vFileType := 'DATAFILE ';
end if;
else
vFileType := ',';
end if;

dbms_output.put_line(vFileType ||
chr(39) || vFileName || chr(39) ||
' SIZE '|| vBytes ||' REUSE ');

if vMaxBytes is not null then
dbms_output.put_line(' AUTOEXTEND ON NEXT ' ||
to_char(vIncrementBy * vDBBlkSize) ||
' MAXSIZE UNLIMITED');
end if;

end;

end loop;

dbms_sql.close_cursor(vCursorFile);

if vExtManLocal then
if vAllocType = 'SYSTEM' then
dbms_output.put_line('EXTENT MANAGEMENT LOCAL AUTOALLOCATE ');
else
dbms_output.put_line('EXTENT MANAGEMENT LOCAL UNIFORM SIZE ' || vInitial);
end if;
else
begin
dbms_output.put_line('DEFAULT STORAGE (INITIAL ' || vInitial);
if vNext is not null then
dbms_output.put_line(' NEXT ' || vNext);
end if;
if vMinExtents is not null then
dbms_output.put_line(' MINEXTENTS ' || vMinExtents);
end if;
if vMaxExtents is not null then
if vPctIncrease is null then
dbms_output.put_line(' MAXEXTENTS ' || vMaxExtents || ')');
else
dbms_output.put_line(' MAXEXTENTS ' || vMaxExtents);
end if;
end if;
if vPctIncrease is not null then
dbms_output.put_line(' PCTINCREASE ' || vPctIncrease || ')');
end if;
end;
end if;

if vVersion in ('8.0', '8.1', '9.0', '9.2') then
begin
if not vLocalTmpTbs then
if vLogging = 'NOLOGGING' then
dbms_output.put_line(vLogging);
end if;
end if;
if not vExtManLocal and vMinExtLen is not null then
dbms_output.put_line('MINIMUM EXTENT ' || vMinExtLen);
end if;
end;
end if;

if vVersion in ('9.0', '9.2') then
if vBlkSize is not null then
dbms_output.put_line('BLOCKSIZE ' || vBlkSize);
end if;
if vSegManagement = 'AUTO' then
dbms_output.put_line('SEGMENT SPACE MANAGEMENT AUTO');
end if;
end if;

if vVersion = '9.2' then
if vForceLogging = 'YES' then
dbms_output.put_line('FORCE LOGGING');
end if;
end if;

if vLocalTmpTbs = false and vContents = 'TEMPORARY' then
dbms_output.put_line('TEMPORARY');
end if;

if vTbsStatus <> 'ONLINE' then
dbms_output.put_line('/');
dbms_output.put_line('ALTER TABLESPACE ' || vTbsName || ' ' || vTbsStatus);
end if;

dbms_output.put_line('/');

end;

end loop;

dbms_output.put_line('spool off');
dbms_sql.close_cursor(vCursorTbs);

exception
when others then
dbms_sql.close_cursor(vCursorTbs);

end;
/

spool off

Prompt
Prompt Script create_tablespaces.sql generated.
Prompt

set verify on
set feedback on
set pagesize 30 head on lines 100
set termout on trimspool on
set serveroutput off
