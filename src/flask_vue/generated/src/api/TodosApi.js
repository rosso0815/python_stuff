/**
 * TodoMVC API
 * A simple TodoMVC API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Todo from '../model/Todo';

/**
* Todos service.
* @module api/TodosApi
* @version 1.0
*/
export default class TodosApi {

    /**
    * Constructs a new TodosApi. 
    * @alias module:api/TodosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createTodo operation.
     * @callback module:api/TodosApi~createTodoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Todo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new task
     * @param {Object} opts Optional parameters
     * @param {module:api/TodosApi~createTodoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Todo}
     */
    createTodo(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Fields': opts['xFields']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Todo;

      return this.apiClient.callApi(
        '/todos/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTodo operation.
     * @callback module:api/TodosApi~deleteTodoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a task given its identifier
     * @param {module:api/TodosApi~deleteTodoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTodo(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/todos/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTodo operation.
     * @callback module:api/TodosApi~getTodoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Todo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a given resource
     * @param {Object} opts Optional parameters
     * @param {module:api/TodosApi~getTodoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Todo}
     */
    getTodo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Fields': opts['xFields']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Todo;

      return this.apiClient.callApi(
        '/todos/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listTodos operation.
     * @callback module:api/TodosApi~listTodosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Todo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all tasks
     * @param {Object} opts Optional parameters
     * @param {module:api/TodosApi~listTodosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Todo>}
     */
    listTodos(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Fields': opts['xFields']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Todo];

      return this.apiClient.callApi(
        '/todos/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putTodo operation.
     * @callback module:api/TodosApi~putTodoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Todo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a task given its identifier
     * @param {Object} opts Optional parameters
     * @param {module:api/TodosApi~putTodoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Todo}
     */
    putTodo(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Fields': opts['xFields']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Todo;

      return this.apiClient.callApi(
        '/todos/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
